/*
 * User API
 *
 * An API for creating and authenticating system users
 *
 * API version: 0.1.0
 * Contact: joe@bebo.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goauthapi

import (
	"context"
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"net/http"
	"os"
)

const (
	dbhost = "localhost"
	dbport = 5432
	dbuser = "postgres"
	dbname = "auth_data"
)

// AuthAPIApiService is a service that implements the logic for the AuthAPIApiServicer
// This service should implement the business logic for every endpoint for the AuthAPIApi API.
// Include any external packages or services that will be required by this service.
type AuthAPIApiService struct {
}

func (s *AuthAPIApiService) getDbConnection() *sql.DB {
	connStr := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		dbhost, dbport, dbuser, os.Getenv("POSTGRES_PASSWORD"), dbname)

	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}

	err = db.Ping()
	if err != nil {
		panic(err)
	}

	return db
}

// NewAuthAPIApiService creates a default api service
func NewAuthAPIApiService() AuthAPIApiServicer {
	return &AuthAPIApiService{}
}

// AddAccount - adds a new account
func (s *AuthAPIApiService) AddAccount(ctx context.Context, userAccountDetails UserAccountDetails) (ImplResponse, error) {
	err := userAccountDetails.Validate()
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	db := s.getDbConnection()
	defer db.Close()

	var newUserId sql.NullInt32
	err = db.QueryRow("SELECT public.add_account($1, $2, $3);", userAccountDetails.AccountType, userAccountDetails.Username, userAccountDetails.Password).Scan(&newUserId)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	if !newUserId.Valid {
		// the new user was not created, a user with the supplied userAccountDetails.Username already exists in the db
		return Response(http.StatusConflict, nil), err
	}

	return Response(http.StatusCreated, NewUserAccount{Id: newUserId.Int32}), nil
}

// AuthenticateUser -
func (s *AuthAPIApiService) AuthenticateUser(ctx context.Context, userCredentials UserCredentials) (ImplResponse, error) {
	err := userCredentials.Validate()
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	db := s.getDbConnection()
	defer db.Close()

	var userId sql.NullInt32
	var authenticated sql.NullBool
	err = db.QueryRow("SELECT account_id, authenticated FROM public.authenticate($1, $2);", userCredentials.Username, userCredentials.Password).Scan(&userId, &authenticated)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	userAccount := ExistingUserAccount{}
	if userId.Valid {
		userAccount.Id = userId.Int32
		if authenticated.Valid {
			userAccount.Authenticated = authenticated.Bool
			return Response(http.StatusAccepted, userAccount), nil
		} else {
			return Response(http.StatusUnauthorized, userAccount), nil
		}
	} else {
		return Response(http.StatusUnauthorized, userAccount), nil
	}
}

// Ping - tests this api
func (s *AuthAPIApiService) Ping(ctx context.Context) (ImplResponse, error) {
	hostname, err := os.Hostname()
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	return Response(http.StatusCreated, PingResponse{Hostname: hostname}), nil
}
